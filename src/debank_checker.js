const fs = require('fs');
const path = require('path');
const { chromium } = require('playwright');
const ExcelJS = require('exceljs');
const cliProgress = require('cli-progress');
const colors = require('colors');

class DeBankChecker {
  constructor() {
    this.results = [];
    this.browsers = [];
    this.progressBar = null;
    this.startTime = null;
    
    // –î–æ–º–µ–Ω—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤
    this.blockedDomains = [
      '*google-analytics.com*',
      '*googletagmanager.com*',
      '*facebook.com*',
      '*facebook.net*',
      '*doubleclick.net*',
      '*googlesyndication.com*',
      '*googleadservices.com*',
      '*hotjar.com*',
      '*mixpanel.com*',
      '*segment.com*',
      '*amplitude.com*',
      '*intercom.io*',
      '*fullstory.com*',
      '*logrocket.com*',
      '*bugsnag.com*',
      '*sentry.io*'
    ];
  }

  // –ö—Ä–∞—Å–∏–≤–∞—è ANSI –∑–∞—Å—Ç–∞–≤–∫–∞
  showLogo() {
    console.clear(); // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
    
    const logo = `
${colors.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')}
${colors.cyan('‚ïë')}                                                                              ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó')}               ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù')}               ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}                ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó')}                ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó')}               ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}             ${colors.green.bold('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}               ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}                                                                              ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold('‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó')}            ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold('‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}           ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold('‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù')}           ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold('‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó')}           ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold('‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë')}           ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}           ${colors.yellow.bold(' ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù')}           ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}                                                                              ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}                    ${colors.gray('üíé –ê–≤—Ç–æ—Ä: ')}${colors.blue('https://t.me/privatekey7')}${colors.gray('üíé')}                      ${colors.cyan('‚ïë')}
${colors.cyan('‚ïë')}                                                                              ${colors.cyan('‚ïë')}
${colors.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù')}
`;

    console.log(logo);
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –ª–æ–≥–æ—Ç–∏–ø–∞
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–∫—Å–∏
  checkProxies() {
    const proxyFile = 'config/proxies.txt';
    
    if (!fs.existsSync(proxyFile)) {
      return { hasProxies: false, proxies: [] };
    }

    try {
      const content = fs.readFileSync(proxyFile, 'utf8');
      const lines = content.split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'));

      const validProxies = [];
      
      for (const line of lines) {
        const proxy = this.parseProxyString(line);
        if (proxy) {
          validProxies.push(proxy);
        }
      }

      return {
        hasProxies: validProxies.length > 0,
        proxies: validProxies
      };
    } catch (error) {
      console.log(colors.yellow(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø—Ä–æ–∫—Å–∏: ${error.message}`));
      return { hasProxies: false, proxies: [] };
    }
  }

  // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∫—Å–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ 4 —Ñ–æ—Ä–º–∞—Ç–æ–≤)
  parseProxyString(proxyString) {
    try {
      let protocol = 'http';
      let server = '';
      let username = '';
      let password = '';
      let host = '';
      let port = '';

      const cleanProxy = proxyString.trim();

      // –§–æ—Ä–º–∞—Ç IP:PORT:LOGIN:PASS
      const colonParts = cleanProxy.split(':');
      if (colonParts.length === 4 && !cleanProxy.includes('://') && !cleanProxy.includes('@')) {
        host = colonParts[0];
        port = colonParts[1];
        username = colonParts[2];
        password = colonParts[3];
        protocol = 'http';
        server = `${host}:${port}`;
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º –∏–ª–∏ @
        if (cleanProxy.startsWith('http://')) {
          protocol = 'http';
          server = cleanProxy.replace('http://', '');
        } else if (cleanProxy.startsWith('https://')) {
          protocol = 'https';
          server = cleanProxy.replace('https://', '');
        } else if (cleanProxy.startsWith('socks5://')) {
          protocol = 'socks5';
          server = cleanProxy.replace('socks5://', '');
        } else if (cleanProxy.startsWith('socks4://')) {
          protocol = 'socks4';
          server = cleanProxy.replace('socks4://', '');
        } else {
          protocol = 'http';
          server = cleanProxy;
        }

        // –ü–∞—Ä—Å–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        if (server.includes('@')) {
          const parts = server.split('@');
          if (parts.length === 2) {
            const authPart = parts[0];
            server = parts[1];
            
            if (authPart.includes(':')) {
              const authParts = authPart.split(':');
              username = authParts[0];
              password = authParts[1];
            }
          }
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º host –∏ port
        if (server.includes(':')) {
          const serverParts = server.split(':');
          host = serverParts[0];
          port = serverParts[1];
        }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è - –ø—Ä–æ–∫—Å–∏ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (!username || !password) {
        return null;
      }

      // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      if (!host || !port || isNaN(port)) {
        return null;
      }

      return {
        server: `${protocol}://${server}`,
        protocol: protocol,
        host: host,
        port: parseInt(port),
        username: username,
        password: password
      };
    } catch (error) {
      return null;
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
  loadWallets() {
    const walletFile = 'config/wallets.txt';
    
    if (!fs.existsSync(walletFile)) {
      throw new Error(`–§–∞–π–ª ${walletFile} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    try {
      const content = fs.readFileSync(walletFile, 'utf8');
      const addresses = content.split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'))
        .filter(addr => /^0x[a-fA-F0-9]{40}$/.test(addr));

      if (addresses.length === 0) {
        throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤');
      }

      return addresses;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–æ–≤: ${error.message}`);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞
  async createBrowser(proxy = null) {
    const launchOptions = {
      headless: true,
      args: [
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--no-sandbox',
        '--disable-dev-shm-usage',
        '--disable-gpu',
        '--disable-extensions',
        '--disable-plugins'
      ]
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (proxy) {
      launchOptions.proxy = {
        server: proxy.server,
        username: proxy.username,
        password: proxy.password
      };
    }

    const browser = await chromium.launch(launchOptions);
    this.browsers.push(browser);
    return browser;
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  async createProtectedContext(browser) {
    const context = await browser.newContext({
      userAgent: this.getRandomUserAgent(),
      viewport: { width: 1280, height: 720 },
      extraHTTPHeaders: {
        'Accept-Language': 'ru-ru,ru;q=0.9,en-US;q=0.8,en;q=0.7',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
      }
    });

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç—Ä–µ–∫–µ—Ä–æ–≤
    await context.route('**/*', async (route) => {
      const url = route.request().url();
      const shouldBlock = this.blockedDomains.some(domain => {
        const pattern = domain.replace(/\*/g, '.*');
        return new RegExp(pattern).test(url);
      });

      if (shouldBlock) {
        await route.abort();
      } else {
        await route.continue();
      }
    });

    return context;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ User-Agent
  getRandomUserAgent() {
    const userAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:120.0) Gecko/20100101 Firefox/120.0',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    ];
    return userAgents[Math.floor(Math.random() * userAgents.length)];
  }

  // –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
  async analyzeWallet(address, browser) {
    let totalValue = 0;
    let error = null;
    let context = null;
    let page = null;

    try {
      context = await this.createProtectedContext(browser);
      page = await context.newPage();

      const profileUrl = `https://debank.com/profile/${address}`;
      await page.goto(profileUrl, { 
        waitUntil: 'networkidle', 
        timeout: 60000 
      });

      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await page.waitForTimeout(5000);

      // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
      const selectors = [
        '[data-testid="total-balance"]',
        '.HeaderInfo_totalAssetInner__HyrdC',
        '.TotalAssetCard_totalAssetInner__VVZFX',
        'div[class*="totalAsset"] span[class*="totalAssetInner"]',
        'div[class*="TotalAsset"] span',
        'span[class*="totalAssetInner"]'
      ];

      let balanceText = null;
      for (const selector of selectors) {
        try {
          const element = await page.$(selector);
          if (element) {
            balanceText = await element.textContent();
            if (balanceText && balanceText.includes('$')) {
              break;
            }
          }
        } catch (e) {
          continue;
        }
      }

      if (balanceText) {
        const match = balanceText.match(/\$([0-9,]+\.?[0-9]*)/);
        if (match) {
          totalValue = parseFloat(match[1].replace(/,/g, ''));
        }
      }

    } catch (err) {
      error = err.message;
    } finally {
      if (page) await page.close();
      if (context) await context.close();
    }

    return {
      address,
      balance: totalValue,
      status: error ? '–û—à–∏–±–∫–∞' : '–£—Å–ø–µ—à–Ω–æ',
      error: error
    };
  }

  // –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π)
  async runSlowMode(wallets) {
    console.log(colors.yellow('üêå –ú–ï–î–õ–ï–ù–ù–´–ô –†–ï–ñ–ò–ú: –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏'));
    console.log(colors.gray(`‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~${Math.round(wallets.length * 24)} —Å–µ–∫—É–Ω–¥`));
    
    const browser = await this.createBrowser();
    
    this.progressBar = new cliProgress.SingleBar({
      format: colors.cyan('üí∞ –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤') + ' |' + colors.green('{bar}') + '| {percentage}% | {value}/{total} | ' + colors.yellow('–û—Å—Ç–∞–ª–æ—Å—å: {eta}s') + ' | ' + colors.green('{status}'),
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true
    });

    this.progressBar.start(wallets.length, 0, { status: '–ó–∞–ø—É—Å–∫...', eta: 0 });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    this.results = [];

    for (let i = 0; i < wallets.length; i++) {
      const wallet = wallets[i];
      const result = await this.analyzeWallet(wallet, browser);
      this.results.push(result);
      
      const shortAddr = `${wallet.slice(0, 6)}...${wallet.slice(-4)}`;
      const status = result.status === '–£—Å–ø–µ—à–Ω–æ' ? 
        colors.green(`‚úÖ ${shortAddr}`) : 
        colors.red(`‚ùå ${shortAddr}`);
      
      this.progressBar.update(i + 1, { 
        status: status,
        eta: Math.round((wallets.length - i - 1) * 24)
      });

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      if (i < wallets.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    this.progressBar.stop();
    await browser.close();
  }

  // –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π —Å –ø—Ä–æ–∫—Å–∏)
  async runFastMode(wallets, proxies) {
    const maxConcurrent = Math.min(proxies.length, 10); // –ú–∞–∫—Å–∏–º—É–º 5 –±—Ä–∞—É–∑–µ—Ä–æ–≤
    const batchSize = Math.min(wallets.length, 20);
    
    console.log(colors.green('üöÄ –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø—Ä–æ–∫—Å–∏'));
    console.log(colors.gray(`üåê –ü—Ä–æ–∫—Å–∏: ${proxies.length}, –ë—Ä–∞—É–∑–µ—Ä–æ–≤: ${maxConcurrent}, –ë–∞—Ç—á: ${batchSize}`));
    console.log(colors.gray(`‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~${Math.round(wallets.length / maxConcurrent * 8)} —Å–µ–∫—É–Ω–¥`));

    this.progressBar = new cliProgress.SingleBar({
      format: colors.cyan('üöÄ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑') + ' |' + colors.green('{bar}') + '| {percentage}% | {value}/{total} | ' + colors.yellow('ETA: {eta}s') + ' | ' + colors.blue('–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active}') + ' | ' + colors.magenta('{status}'),
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true
    });

    this.progressBar.start(wallets.length, 0, { 
      status: '–ó–∞–ø—É—Å–∫...', 
      eta: 0,
      active: 0
    });

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞
    const tempResults = new Array(wallets.length);
    
    // –°–æ–∑–¥–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã —Å –ø—Ä–æ–∫—Å–∏
    const browsers = [];
    for (let i = 0; i < maxConcurrent; i++) {
      const proxy = proxies[i % proxies.length];
      const browser = await this.createBrowser(proxy);
      browsers.push(browser);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
    const indexedWallets = wallets.map((wallet, index) => ({ wallet, originalIndex: index }));

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –±–∞—Ç—á–∞–º–∏
    const batches = [];
    for (let i = 0; i < indexedWallets.length; i += batchSize) {
      batches.push(indexedWallets.slice(i, i + batchSize));
    }

    let completed = 0;
    let activeCount = 0;

    for (const batch of batches) {
      const promises = batch.map(async (walletData, index) => {
        const { wallet, originalIndex } = walletData;
        const browserIndex = index % browsers.length;
        const browser = browsers[browserIndex];
        
        activeCount++;
        this.progressBar.update(completed, { 
          active: activeCount,
          status: '–û–±—Ä–∞–±–æ—Ç–∫–∞...'
        });

        try {
          const result = await this.analyzeWallet(wallet, browser);
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          tempResults[originalIndex] = result;
          
          completed++;
          activeCount--;
          
          const shortAddr = `${wallet.slice(0, 6)}...${wallet.slice(-4)}`;
          const status = result.status === '–£—Å–ø–µ—à–Ω–æ' ? 
            colors.green(`‚úÖ ${shortAddr}`) : 
            colors.red(`‚ùå ${shortAddr}`);
          
          this.progressBar.update(completed, { 
            active: activeCount,
            status: status,
            eta: Math.round((wallets.length - completed) / maxConcurrent * 8)
          });
          
          return result;
        } catch (error) {
          activeCount--;
          completed++;
          
          const result = {
            address: wallet,
            balance: 0,
            status: '–û—à–∏–±–∫–∞',
            error: error.message
          };
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
          tempResults[originalIndex] = result;
          
          this.progressBar.update(completed, { 
            active: activeCount,
            status: colors.red(`‚ùå ${wallet.slice(0, 6)}...${wallet.slice(-4)}`),
            eta: Math.round((wallets.length - completed) / maxConcurrent * 8)
          });
          
          return result;
        }
      });

      await Promise.all(promises);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
      if (batches.indexOf(batch) < batches.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    this.results = tempResults;

    this.progressBar.stop();
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—ã
    for (const browser of browsers) {
      await browser.close();
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
  createProgressBar(total) {
    return new cliProgress.SingleBar({
      format: colors.cyan('üí∞ –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–æ–≤') + ' |' + colors.green('{bar}') + '| {percentage}% | {value}/{total} | ' + colors.yellow('–û—Å—Ç–∞–ª–æ—Å—å: {eta}s') + ' | {status}',
      barCompleteChar: '\u2588',
      barIncompleteChar: '\u2591',
      hideCursor: true
    });
  }

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
  async exportToExcel(filename = 'wallet-results.xlsx') {
    const workbook = new ExcelJS.Workbook();
    const worksheet = workbook.addWorksheet('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    worksheet.addRow(['–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', '–ë–∞–ª–∞–Ω—Å (USD)', '–°—Ç–∞—Ç—É—Å', '–û—à–∏–±–∫–∞']);

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.results.forEach(result => {
      worksheet.addRow([
        result.address,
        result.balance,
        result.status,
        result.error || ''
      ]);
    });

    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
    const totalBalance = this.results.reduce((sum, r) => sum + r.balance, 0);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç—Ä–æ–∫—É —Å –æ–±—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º
    worksheet.addRow(['', '', '', '']);
    const totalRow = worksheet.addRow(['–û–ë–©–ò–ô –ë–ê–õ–ê–ù–°:', totalBalance, '', '']);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
    worksheet.columns = [
      { header: '–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞', key: 'address', width: 45 },
      { header: '–ë–∞–ª–∞–Ω—Å (USD)', key: 'balance', width: 15 },
      { header: '–°—Ç–∞—Ç—É—Å', key: 'status', width: 10 },
      { header: '–û—à–∏–±–∫–∞', key: 'error', width: 30 }
    ];

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const headerRow = worksheet.getRow(1);
    headerRow.font = { bold: true };
    headerRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFD3D3D3' }
    };
    headerRow.alignment = { horizontal: 'center', vertical: 'middle' };

    // –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –æ–±—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º
    totalRow.font = { bold: true };
    totalRow.fill = {
      type: 'pattern',
      pattern: 'solid',
      fgColor: { argb: 'FFFFFF00' }
    };
    totalRow.alignment = { horizontal: 'center', vertical: 'middle' };

    // –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —è—á–µ–µ–∫
    worksheet.eachRow((row, rowNumber) => {
      row.eachCell((cell) => {
        if (!cell.alignment) {
          cell.alignment = { horizontal: 'center', vertical: 'middle' };
        }
      });
    });

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É result –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync('result')) {
      fs.mkdirSync('result');
    }

    const filepath = `result/${filename}`;
    await workbook.xlsx.writeFile(filepath);

    return filepath;
  }

  // –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞
  async run() {
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–≥–æ—Ç–∏–ø
      this.showLogo();
      
      this.startTime = Date.now();

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      this.results = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
      const wallets = this.loadWallets();
      console.log(colors.green(`üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏
      const proxyCheck = this.checkProxies();
      
      if (proxyCheck.hasProxies) {
        console.log(colors.green(`üåê –ù–∞–π–¥–µ–Ω–æ ${proxyCheck.proxies.length} —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ–∫—Å–∏`));
        await this.runFastMode(wallets, proxyCheck.proxies);
      } else {
        console.log(colors.yellow('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º'));
        await this.runSlowMode(wallets);
      }

      // –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const totalBalance = this.results.reduce((sum, r) => sum + r.balance, 0);
      const successful = this.results.filter(r => r.status === '–£—Å–ø–µ—à–Ω–æ').length;
      const duration = ((Date.now() - this.startTime) / 1000).toFixed(1);

      // –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
      console.log('\n' + colors.green('üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ' + duration + ' —Å–µ–∫—É–Ω–¥!'));
      console.log(colors.yellow('üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $' + totalBalance.toLocaleString()));
      console.log(colors.green(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successful}/${wallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤`));

      // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
      const excelFile = await this.exportToExcel(`debank-results-${timestamp}.xlsx`);
      console.log(colors.blue('üìä Excel –æ—Ç—á–µ—Ç: ' + excelFile));

    } catch (error) {
      console.error(colors.red('‚ùå –û—à–∏–±–∫–∞: ' + error.message));
      process.exit(1);
    } finally {
      await this.cleanup();
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  async cleanup() {
    for (const browser of this.browsers) {
      try {
        await browser.close();
      } catch (e) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
      }
    }
    this.browsers = [];
  }
}

module.exports = DeBankChecker; 